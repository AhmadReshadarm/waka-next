{
  "swagger": "2.0",
  "info": {
    "description": "Fingarden API Docs",
    "version": "1.0.0",
    "title": "Fingarden"
  },
  "basePath": "/",
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": ["auth"],
        "summary": "Signup like a new user",
        "description": "",
        "operationId": "signup",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SignupDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid User request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "tags": ["auth"],
        "summary": "Login with email",
        "description": "",
        "operationId": "signin",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SigninDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid User request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/auth/token": {
      "post": {
        "tags": ["auth"],
        "summary": "Create token",
        "description": "",
        "operationId": "CreateToken",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["token"],
              "properties": {
                "token": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful created",
            "schema": {
              "type": "object",
              "properties": {
                "accessToken": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid User request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/auth/session": {
      "post": {
        "tags": ["auth"],
        "summary": "Check for token session",
        "description": "",
        "operationId": "Session",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["token"],
              "properties": {
                "token": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid User request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/auth/reset": {
      "post": {
        "tags": ["auth"],
        "summary": "sends a token to email to reset password",
        "description": "",
        "operationId": "sendRestPasswordToken",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["email"],
              "properties": {
                "email": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid User request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/auth/update-password": {
      "put": {
        "tags": ["auth"],
        "summary": "Update password",
        "description": "",
        "operationId": "UpdatePwd",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["token", "password"],
              "properties": {
                "token": {
                  "type": "string",
                  "description": "token that has been send to email"
                },
                "userPassword": {
                  "type": "string",
                  "description": "User new password"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid User request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/auth/authorize/{token}": {
      "get": {
        "tags": ["auth"],
        "summary": "Verify email by token",
        "description": "",
        "operationId": "confirmEmailByToken",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "token to confirm user email",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Token not found"
          },
          "408": {
            "description": "Reqest timed out"
          },
          "500": {
            "description": "Internal"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["user"],
        "summary": "Get array of users",
        "description": "",
        "operationId": "getUsers",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token"
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "Filtering tags by firstName",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Filtering tags by lastName",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filtering tags by email",
            "required": false,
            "type": "string"
          },
          {
            "name": "isVerified",
            "in": "query",
            "description": "Filtering tags by isVerified",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "role",
            "in": "query",
            "description": "Filtering tags by role",
            "required": false,
            "type": "string",
            "enum": ["Admin", "User"]
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sorting tags by property",
            "default": "firstName",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Ordering results. ASC | DESC",
            "default": "DESC",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 4,
            "description": "qty rows to take for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UsersResponses"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": ["user"],
        "summary": "Create a user",
        "description": "",
        "operationId": "createUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid User request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/users/get-by-email/{email}": {
      "get": {
        "tags": ["user"],
        "summary": "Find user by email",
        "operationId": "findUserByEmail",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token"
          },
          {
            "name": "email",
            "in": "path",
            "description": "Email of user to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal"
          }
        }
      }
    },
    "/users/help": {
      "post": {
        "tags": ["userHelpDisk"],
        "summary": "sends users question to admins for help",
        "operationId": "sendMassege",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "required": true
                },
                "text": {
                  "type": "string",
                  "required": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal"
          }
        }
      }
    },
    "/users/changepsw/{userId}": {
      "put": {
        "tags": ["changeUserPsw"],
        "summary": "change user password",
        "operationId": "changePassword",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token or user-token from user owner"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "id of user to change password",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "password": {
                  "type": "string"
                },
                "oldPassword": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal"
          }
        }
      }
    },
    "/users/email-confirmation": {
      "post": {
        "tags": ["userVerification"],
        "summary": "send user verification email",
        "operationId": "sendVerificationEmail",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token or user-token from user owner"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal"
          }
        }
      }
    },
    "/users/user/{userId}": {
      "get": {
        "tags": ["user"],
        "summary": "Find user by id",
        "operationId": "findUserById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token or user-token from user owner"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "id of user to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal"
          }
        }
      },
      "put": {
        "tags": ["user"],
        "summary": "Update the user",
        "description": "",
        "operationId": "updateUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token or user-token from user owner"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "id of user to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful updated",
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "object",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid User request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["user"],
        "summary": "Delete the user",
        "description": "",
        "operationId": "deleteUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "id of user to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/barcode": {
      "get": {
        "tags": ["barcode"],
        "summary": "get all the barcodes",
        "description": "gets all the generated barcodes",
        "operationId": "getBarcodes",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "name": "code",
            "required": false
          },
          {
            "type": "boolean",
            "in": "query",
            "name": "checked",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "default": "name"
          },
          {
            "type": "string",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "default": "DESC",
            "description": "can be ASC or DESC"
          },
          {
            "type": "string",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "description": "qty rows to skip for pagination"
          },
          {
            "type": "string",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 1,
            "description": "qty rows to take for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BarCodeResponse"
            }
          }
        }
      }
    },
    "/barcode/by-code/{code}": {
      "get": {
        "tags": ["barcode"],
        "summary": "Find barcode by code",
        "operationId": "findByBarcode",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "code of barcode to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Barcode"
            }
          },
          "400": {
            "description": "Invalid code supplied"
          },
          "404": {
            "description": "code not found"
          }
        }
      }
    },
    "/barcode/generate": {
      "post": {
        "tags": ["barcode"],
        "summary": "auto generate",
        "description": "auto generate the barcodes needed based on the amount and number to start",
        "operationId": "autoGenerateBarcode",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/barcodeGen"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Brand request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/brands": {
      "get": {
        "tags": ["brand"],
        "summary": "Get array of brands",
        "description": "",
        "operationId": "getBrands",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "name": "name",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "parent",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "category",
            "required": false
          },
          {
            "type": "boolean",
            "in": "query",
            "name": "showOnMain",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "default": "name"
          },
          {
            "type": "string",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "default": "DESC",
            "description": "can be ASC or DESC"
          },
          {
            "type": "string",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "description": "qty rows to skip for pagination"
          },
          {
            "type": "string",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 10,
            "description": "qty rows to take for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BrandResponse"
            }
          }
        }
      },
      "post": {
        "tags": ["brand"],
        "summary": "Create a brand",
        "description": "",
        "operationId": "createBrand",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Brand"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Brand request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/brands/{brandId}": {
      "get": {
        "tags": ["brand"],
        "summary": "Find brand by id",
        "operationId": "findBrandById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "description": "ID of brand to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Brand"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Brand not found"
          }
        }
      },
      "put": {
        "tags": ["brand"],
        "summary": "Update the brand",
        "description": "",
        "operationId": "updateBrand",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token"
          },
          {
            "name": "brandId",
            "in": "path",
            "description": "ID of brand to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Brand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful updated",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Brand"
            }
          },
          "400": {
            "description": "Invalid Brand request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Brand not found"
          }
        }
      },
      "delete": {
        "tags": ["brand"],
        "summary": "Delete the brand",
        "description": "",
        "operationId": "deleteBrand",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token"
          },
          {
            "name": "brandId",
            "in": "path",
            "description": "ID of brand to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "image": {
                  "type": "string"
                },
                "showOnMain": {
                  "type": "boolean",
                  "default": false,
                  "description": "value true can be post only with admin token"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Brand not found"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": ["category"],
        "summary": "Get array of categories",
        "description": "",
        "operationId": "getCategories",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "name": "name",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "url",
            "required": false
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "name": "parameters",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "parent",
            "required": false
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "name": "children",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "default": "name"
          },
          {
            "type": "string",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "default": "DESC",
            "description": "can be ASC or DESC"
          },
          {
            "type": "string",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "description": "qty rows to skip for pagination"
          },
          {
            "type": "string",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 10,
            "description": "qty rows to take for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CategoryResponse"
            }
          }
        }
      },
      "post": {
        "tags": ["category"],
        "summary": "Create a category",
        "description": "",
        "operationId": "createCategory",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CategoryDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Category request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/categories/{categoryId}": {
      "get": {
        "tags": ["category"],
        "summary": "Find category by id",
        "operationId": "findCategoryById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of category to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Category"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Category not found"
          }
        }
      },
      "put": {
        "tags": ["category"],
        "summary": "Update the category",
        "description": "",
        "operationId": "updateCategory",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of category to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CategoryDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful updated",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "image": {
                  "type": "string"
                },
                "createdAt": {
                  "type": "string",
                  "readOnly": true
                },
                "updatedAt": {
                  "type": "string",
                  "readOnly": true
                },
                "parameters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/Parameter"
                  }
                },
                "url": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Category request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Category not found"
          }
        }
      },
      "delete": {
        "tags": ["category"],
        "summary": "Delete the category",
        "description": "",
        "operationId": "deleteCategory",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of category to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "image": {
                  "type": "string"
                },
                "createdAt": {
                  "type": "string",
                  "readOnly": true
                },
                "updatedAt": {
                  "type": "string",
                  "readOnly": true
                },
                "url": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Category not found"
          }
        }
      }
    },
    "/categories/categoriesTree": {
      "get": {
        "tags": ["category"],
        "summary": "Get array of categories with parents and children trees",
        "description": "",
        "operationId": "getCategoriesTree",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CategoryInTree"
              }
            }
          },
          "404": {
            "description": "Category not found"
          }
        }
      }
    },
    "/colors": {
      "get": {
        "tags": ["color"],
        "summary": "Get array of colors",
        "description": "",
        "operationId": "getColors",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "name": "name",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "url",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "parent",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "category",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "code",
            "required": false
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "name": "products",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "default": "name"
          },
          {
            "type": "string",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "default": "DESC",
            "description": "can be ASC or DESC"
          },
          {
            "type": "string",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "description": "qty rows to skip for pagination"
          },
          {
            "type": "string",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 10,
            "description": "qty rows to take for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ColorResponse"
            }
          }
        }
      },
      "post": {
        "tags": ["color"],
        "summary": "Create a color",
        "description": "",
        "operationId": "createColor",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Color"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Color request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/colors/{colorId}": {
      "get": {
        "tags": ["color"],
        "summary": "Find color by id",
        "operationId": "findColorById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "colorId",
            "in": "path",
            "description": "ID of color to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Color"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Color not found"
          }
        }
      },
      "put": {
        "tags": ["color"],
        "summary": "Update the color",
        "description": "",
        "operationId": "updateColor",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "colorId",
            "in": "path",
            "description": "ID of color to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Color"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful updated",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ColorWithoutJoins"
            }
          },
          "400": {
            "description": "Invalid Color request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Color not found"
          }
        }
      },
      "delete": {
        "tags": ["color"],
        "summary": "Delete the color",
        "description": "",
        "operationId": "deleteColor",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "colorId",
            "in": "path",
            "description": "ID of color to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "code": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Color not found"
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": ["product"],
        "summary": "Get array of products",
        "description": "",
        "operationId": "getProducts",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filtering products by name",
            "required": false,
            "type": "string"
          },

          {
            "name": "minPrice",
            "in": "query",
            "description": "Filtering products by price greater then minPrice",
            "required": false,
            "type": "integer"
          },
          {
            "name": "maxPrice",
            "in": "query",
            "description": "Filtering products by price less then maxPrice",
            "required": false,
            "type": "integer"
          },
          {
            "name": "desc",
            "in": "query",
            "description": "Filtering products by desc",
            "required": false,
            "type": "string"
          },
          {
            "name": "available",
            "in": "query",
            "description": "Filtering products by available",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "colors",
            "in": "query",
            "description": "Filtering products by colors URLs in array",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "categories",
            "in": "query",
            "description": "Filtering products by categories URLs in array",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "brands",
            "in": "query",
            "description": "Filtering products by brands names in array",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Filtering products by tags URLs in array",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "sizes",
            "in": "query",
            "description": "Filtering products by sizes URLs in array",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Filtering products by parent url",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "default": "name",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Ordering results. ASC | DESC",
            "default": "DESC",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "description": "qty rows to skip for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "qty rows to take for pagination",
            "default": 10,
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductResponse"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["product"],
        "summary": "Create a product",
        "description": "",
        "operationId": "createProduct",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ProductDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Product request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/products/{productId}": {
      "get": {
        "tags": ["product"],
        "summary": "Find product by id",
        "operationId": "findProductById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "put": {
        "tags": ["product"],
        "summary": "Update the product",
        "description": "",
        "operationId": "updateProduct",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ProductDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful updated",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ProductWithoutJoins"
            }
          },
          "400": {
            "description": "Invalid Product request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "delete": {
        "tags": ["product"],
        "summary": "Delete the product",
        "description": "",
        "operationId": "deleteProduct",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "desc": {
                  "type": "string"
                },
                "createdAt": {
                  "type": "string",
                  "readOnly": true
                },
                "updatedAt": {
                  "type": "string",
                  "readOnly": true
                },
                "url": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/products/by-url/{url}": {
      "get": {
        "tags": ["product"],
        "summary": "Find product by url",
        "operationId": "findProductByUrl",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "url",
            "in": "path",
            "description": "URL of product to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ProductDTO"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/products/priceRange": {
      "get": {
        "tags": ["product"],
        "summary": "Get min and max product prices by category and name",
        "description": "",
        "operationId": "getPriceRange",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filtering products by name",
            "required": false,
            "type": "string"
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Filtering products by parent URL",
            "required": false,
            "type": "string"
          },
          {
            "name": "categories",
            "in": "query",
            "description": "Filtering products by categories URLs in array",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/PriceRange"
            }
          }
        }
      }
    },
    "/news": {
      "get": {
        "tags": ["news"],
        "summary": "Get array of news posts",
        "description": "",
        "operationId": "getNews",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "showOnMain",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sorting reviews by property",
            "default": "productId",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Ordering results. ASC | DESC",
            "default": "DESC",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "description": "qty rows to skip for pagination"
          },
          {
            "type": "string",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 4,
            "description": "qty rows to take for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/NewsPosts"
            }
          }
        }
      },
      "post": {
        "tags": ["news"],
        "summary": "Create a news post",
        "description": "",
        "operationId": "createNews",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token is needed"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/NewsDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/News"
            }
          },
          "400": {
            "description": "Invalid News post request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/news/{newsId}": {
      "get": {
        "tags": ["news"],
        "summary": "Find news post by id",
        "operationId": "findNewsById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "newsId",
            "in": "path",
            "description": "ID of news post to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/News"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Tag not found"
          }
        }
      },
      "put": {
        "tags": ["news"],
        "summary": "Update news post",
        "description": "",
        "operationId": "updateNews",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "name": "newsId",
            "in": "path",
            "description": "ID of news to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/NewsDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful updated",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/News"
            }
          },
          "400": {
            "description": "Invalid News post request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "News post not found"
          }
        }
      },
      "delete": {
        "tags": ["news"],
        "summary": "Delete the news",
        "description": "",
        "operationId": "deleteNews",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "name": "newsId",
            "in": "path",
            "description": "ID of news to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "News not found"
          }
        }
      }
    },
    "/news/by-url/{url}": {
      "get": {
        "tags": ["news"],
        "summary": "Find news post by url",
        "operationId": "findNewsByUrl",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "url",
            "in": "path",
            "description": "URL of news post to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/News"
            }
          },
          "400": {
            "description": "Invalid url supplied"
          },
          "404": {
            "description": "news not found"
          }
        }
      }
    },
    "/tags": {
      "get": {
        "tags": ["tag"],
        "summary": "Get array of tags",
        "description": "",
        "operationId": "getTags",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "name": "name",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "url",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "parent",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "children",
            "required": false
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "name": "products",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "default": "name"
          },
          {
            "type": "string",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "default": "DESC",
            "description": "can be ASC or DESC"
          },
          {
            "type": "string",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "description": "qty rows to skip for pagination"
          },
          {
            "type": "string",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 10,
            "description": "qty rows to take for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TagResponse"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["tag"],
        "summary": "Create a tag",
        "description": "",
        "operationId": "createTag",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Tag request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/tags/{tagId}": {
      "get": {
        "tags": ["tag"],
        "summary": "Find tag by id",
        "operationId": "findTagById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "ID of tag to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Tag"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Tag not found"
          }
        }
      },
      "put": {
        "tags": ["tag"],
        "summary": "Update the tag",
        "description": "",
        "operationId": "updateTag",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "ID of tag to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful updated",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TagWithoutJoins"
            }
          },
          "400": {
            "description": "Invalid Tag request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Tag not found"
          }
        }
      },
      "delete": {
        "tags": ["tag"],
        "summary": "Delete the tag",
        "description": "",
        "operationId": "deleteTag",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "ID of tag to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Tag not found"
          }
        }
      }
    },
    "/sizes": {
      "get": {
        "tags": ["size"],
        "summary": "Get array of sizes",
        "description": "",
        "operationId": "getSizes",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "name": "name",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "url",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "parent",
            "required": false
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "name": "products",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "default": "name"
          },
          {
            "type": "string",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "default": "DESC",
            "description": "can be ASC or DESC"
          },
          {
            "type": "string",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "description": "qty rows to skip for pagination"
          },
          {
            "type": "string",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 10,
            "description": "qty rows to take for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SizeResponse"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["size"],
        "summary": "Create a size",
        "description": "",
        "operationId": "createSize",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Size"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Size request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/sizes/{sizeId}": {
      "get": {
        "tags": ["size"],
        "summary": "Find size by id",
        "operationId": "findSizeById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "sizeId",
            "in": "path",
            "description": "ID of size to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Size"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Size not found"
          }
        }
      },
      "put": {
        "tags": ["size"],
        "summary": "Update the size",
        "description": "",
        "operationId": "updateSize",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "name": "sizeId",
            "in": "path",
            "description": "ID of size to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Size"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful updated",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SizeWithoutJoins"
            }
          },
          "400": {
            "description": "Invalid Size request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Size not found"
          }
        }
      },
      "delete": {
        "tags": ["size"],
        "summary": "Delete the size",
        "description": "",
        "operationId": "deleteSize",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "name": "sizeId",
            "in": "path",
            "description": "ID of tag to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Size not found"
          }
        }
      }
    },
    "/images/{fileName}": {
      "get": {
        "tags": ["image"],
        "summary": "Find image by filename",
        "operationId": "findImageByFileName",
        "consumes": ["application/json"],
        "produces": ["image/png"],
        "parameters": [
          {
            "name": "fileName",
            "in": "path",
            "description": "Filename of image to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Image not found"
          }
        }
      },
      "delete": {
        "tags": ["image"],
        "summary": "Delete image by filename",
        "operationId": "deleteImageByFileName",
        "consumes": ["application/json"],
        "produces": ["image/png"],
        "parameters": [
          {
            "name": "fileName",
            "in": "path",
            "description": "image File name to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Image not found"
          }
        }
      }
    },
    "/images": {
      "get": {
        "tags": ["image"],
        "summary": "Get image list",
        "description": "Returns an array of files names",
        "operationId": "getImages",
        "consumes": ["application/json"],
        "produces": ["image/png"],
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "name": "filename",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "originalName",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "mimeType",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "size",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "default": "originalName"
          },
          {
            "type": "string",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "default": "DESC",
            "description": "can be ASC or DESC"
          },
          {
            "type": "string",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "description": "qty rows to skip for pagination"
          },
          {
            "type": "string",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 10,
            "description": "qty rows to take for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImageResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Images not found"
          }
        }
      },
      "post": {
        "tags": ["image"],
        "summary": "Create an image",
        "description": "Return array of filenames images which uploaded",
        "operationId": "createImage",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": ["files"],
              "type": "object",
              "properties": {
                "files": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "array of images to upload"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Image request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/subscribes": {
      "get": {
        "tags": ["subscribes"],
        "summary": "Get array of subscribers",
        "description": "",
        "operationId": "getSubscribers",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SubscribersResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": ["subscribes"],
        "summary": "Create a subscriber",
        "description": "",
        "operationId": "createSubscribers",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SubscriberDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/SubscribersResponse"
              }
            }
          },
          "409": {
            "description": "Conflict"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/subscribes/{mailId}": {
      "get": {
        "tags": ["subscribes"],
        "summary": "Get subscriber by Id",
        "description": "",
        "operationId": "getSubscriberById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "name": "mailId",
            "in": "path",
            "description": "ID of email to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/SubscribersResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": ["subscribes"],
        "summary": "Delete the subscriber",
        "description": "",
        "operationId": "deleteSubscriber",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "name": "mailId",
            "in": "path",
            "description": "ID of email to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/SubscribersResponse"
              }
            }
          },
          "404": {
            "description": "Email not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/subscribes/call": {
      "post": {
        "tags": ["subscribes"],
        "summary": "Create a subscriber",
        "description": "",
        "operationId": "sendAdminCallNotification",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["to", "subject", "html"],
              "properties": {
                "to": {
                  "type": "string"
                },
                "subject": {
                  "type": "string"
                },
                "html": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "409": {
            "description": "Conflict"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/subscribes/files": {
      "get": {
        "tags": ["subscribes"],
        "summary": "Get subscribers in Ms.Excel format",
        "description": "",
        "operationId": "getSubscriberInExcelFormat",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "File Not Found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/mailings": {
      "get": {
        "tags": ["mailing"],
        "summary": "Get array of Email template in raw html",
        "description": "",
        "operationId": "getMailings",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MailingsResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": ["mailing"],
        "summary": "create a mailing",
        "description": "",
        "operationId": "createMailing",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/MailingDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",

              "$ref": "#/definitions/MailingsResponse"
            }
          },
          "409": {
            "description": "Conflict"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/mailings/{templateId}": {
      "get": {
        "tags": ["mailing"],
        "summary": "Get Email template in raw html",
        "description": "",
        "operationId": "getMailing",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of email template to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",

              "$ref": "#/definitions/MailingsResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": ["mailing"],
        "summary": "update mailing post",
        "description": "",
        "operationId": "updateMailing",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of email template to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/MailingDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",

              "$ref": "#/definitions/MailingsResponse"
            }
          },
          "409": {
            "description": "Conflict"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": ["mailing"],
        "summary": "Delete the mailing",
        "description": "",
        "operationId": "deleteSubscriber",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of email template to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",

              "$ref": "#/definitions/MailingsResponse"
            }
          },
          "404": {
            "description": "Email not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/mailings/send-selected": {
      "post": {
        "tags": ["mailing"],
        "summary": "send Email to users",
        "description": "",
        "operationId": "sendEmailToSelected",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/EmailTemplateSelectedDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/mailings/send-all": {
      "post": {
        "tags": ["mailing"],
        "summary": "send Email to users",
        "description": "",
        "operationId": "sendEmailToAll",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "mailingId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/mailings/sendmail": {
      "post": {
        "tags": ["mailing"],
        "summary": "send Email to users",
        "description": "",
        "operationId": "sendEmail",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/EmailTemplateForOneDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/addresses": {
      "get": {
        "tags": ["address"],
        "summary": "Get array of addresses",
        "description": "",
        "operationId": "getAddresses",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Filtering addresses by userId",
            "required": false,
            "type": "string"
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "Filtering addresses by firstName",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Filtering addresses by lastName",
            "required": false,
            "type": "string"
          },
          {
            "name": "address",
            "in": "query",
            "description": "Filtering addresses by address",
            "required": false,
            "type": "string"
          },
          {
            "name": "city",
            "in": "query",
            "description": "Filtering addresses by city",
            "required": false,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Filtering addresses by country",
            "required": false,
            "type": "string"
          },
          {
            "name": "zipCode",
            "in": "query",
            "description": "Filtering addresses by zipCode",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sorting addresses by property",
            "default": "userId",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Ordering results. ASC | DESC",
            "default": "DESC",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "description": "qty rows to skip for pagination"
          },
          {
            "type": "string",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 10,
            "description": "qty rows to take for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AddressResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": ["address"],
        "summary": "Create a address",
        "description": "",
        "operationId": "createAddress",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AddressDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Address request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/addresses/direct": {
      "post": {
        "tags": ["address"],
        "summary": "Create a address via admins",
        "description": "",
        "operationId": "createAddressDirect",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AddressDirectDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Address request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/addresses/{addressId}": {
      "get": {
        "tags": ["address"],
        "summary": "Find address by id",
        "operationId": "findAddressById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of address to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Address"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Address not found"
          }
        }
      },
      "put": {
        "tags": ["address"],
        "summary": "Update the address",
        "description": "",
        "operationId": "updateAddress",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of address to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AddressDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful updated",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AddressWithoutJoins"
            }
          },
          "400": {
            "description": "Invalid Address request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Address not found"
          }
        }
      },
      "delete": {
        "tags": ["address"],
        "summary": "Delete the address",
        "description": "",
        "operationId": "deleteAddress",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of address to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string"
                },
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "address": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                },
                "zipCode": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Address not found"
          }
        }
      }
    },
    "/baskets": {
      "get": {
        "tags": ["basket"],
        "summary": "Get array of baskets",
        "description": "",
        "operationId": "getBaskets",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "Filtering baskets by userId",
            "required": false,
            "type": "string"
          },
          {
            "name": "minTotalAmount",
            "in": "query",
            "description": "Filtering baskets by totalAmount greater then minTotalAmount",
            "required": false,
            "type": "integer"
          },
          {
            "name": "maxTotalAmount",
            "in": "query",
            "description": "Filtering baskets by totalAmount less then maxTotalAmount",
            "required": false,
            "type": "integer"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filtering baskets by status",
            "required": false,
            "type": "string"
          },
          {
            "name": "updatedFrom",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "updatedTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sorting baskets by property",
            "default": "userId",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Ordering results. ASC | DESC",
            "default": "DESC",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "description": "qty rows to skip for pagination"
          },
          {
            "type": "string",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 10,
            "description": "qty rows to take for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BasketResponse"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["basket"],
        "summary": "Create a basket",
        "description": "",
        "operationId": "createBasket",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BasketDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Basket request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/baskets/clear/{basketId}": {
      "get": {
        "tags": ["basket"],
        "summary": "Clear basket by id",
        "operationId": "clearBasket",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "basketId",
            "in": "path",
            "description": "ID of basket to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Basket"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Basket not found"
          }
        }
      }
    },
    "/baskets/{basketId}": {
      "get": {
        "tags": ["basket"],
        "summary": "Find basket by id",
        "operationId": "findBasketById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "basketId",
            "in": "path",
            "description": "ID of basket to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Basket"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Basket not found"
          }
        }
      },
      "put": {
        "tags": ["basket"],
        "summary": "Update the basket",
        "description": "",
        "operationId": "updateBasket",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "basketId",
            "in": "path",
            "description": "ID of basket to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BasketDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful updated",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BasketWithoutJoins"
            }
          },
          "400": {
            "description": "Invalid Basket request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Basket not found"
          }
        }
      },
      "delete": {
        "tags": ["basket"],
        "summary": "Delete the basket",
        "description": "",
        "operationId": "deleteBasket",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "name": "basketId",
            "in": "path",
            "description": "ID of basket to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string"
                },
                "createdAt": {
                  "type": "string",
                  "readOnly": true
                },
                "updatedAt": {
                  "type": "string",
                  "readOnly": true
                },
                "status": {
                  "type": "string",
                  "default": "New"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Basket not found"
          }
        }
      }
    },
    "/checkouts/direct": {
      "post": {
        "tags": ["checkout"],
        "summary": "Create a checkout",
        "description": "",
        "operationId": "createCheckoutWithoutRegister",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/EmailTemplateForOneDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Checkout request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/checkouts/all": {
      "get": {
        "tags": ["checkoutAll"],
        "summary": "Get array of checkouts",
        "description": "",
        "operationId": "getCheckoutsAll",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "name": "addressId",
            "in": "query",
            "description": "Filtering checkouts by addressId",
            "required": false,
            "type": "string"
          },
          {
            "name": "basketId",
            "in": "query",
            "description": "Filtering checkouts by basketId",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Filtering checkouts by userId",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sorting checkouts by property",
            "default": "basket",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Ordering results. ASC | DESC",
            "default": "DESC",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "description": "qty rows to skip for pagination"
          },
          {
            "type": "string",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 10,
            "description": "qty rows to take for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CheckoutResponse"
              }
            }
          }
        }
      }
    },
    "/checkouts": {
      "get": {
        "tags": ["checkout"],
        "summary": "Get array of checkouts",
        "description": "",
        "operationId": "getCheckouts",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "addressId",
            "in": "query",
            "description": "Filtering checkouts by addressId",
            "required": false,
            "type": "string"
          },
          {
            "name": "basketId",
            "in": "query",
            "description": "Filtering checkouts by basketId",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sorting checkouts by property",
            "default": "basket",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Ordering results. ASC | DESC",
            "default": "DESC",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "description": "qty rows to skip for pagination"
          },
          {
            "type": "string",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 10,
            "description": "qty rows to take for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CheckoutResponse"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["checkout"],
        "summary": "Create a checkout",
        "description": "",
        "operationId": "createCheckout",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CheckoutDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Checkout request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/checkouts/{checkoutId}": {
      "get": {
        "tags": ["checkout"],
        "summary": "Find checkout by id",
        "operationId": "findCheckoutById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token "
          },
          {
            "name": "checkoutId",
            "in": "path",
            "description": "ID of checkout to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Checkout"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Checkout not found"
          }
        }
      },
      "put": {
        "tags": ["checkout"],
        "summary": "Update the checkout",
        "description": "",
        "operationId": "updateCheckout",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "name": "checkoutId",
            "in": "path",
            "description": "ID of checkout to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "enum": ["New", "InDelivery", "Completed", "Canceled"]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful updated",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Checkout"
            }
          },
          "400": {
            "description": "Invalid Checkout request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Checkout not found"
          }
        }
      },
      "delete": {
        "tags": ["checkout"],
        "summary": "Delete the checkout",
        "description": "",
        "operationId": "deleteCheckout",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "name": "checkoutId",
            "in": "path",
            "description": "ID of checkout to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string"
                },
                "comment": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Checkout not found"
          }
        }
      }
    },
    "/orderProducts": {
      "get": {
        "tags": ["orderProduct"],
        "summary": "Get array of orderProducts",
        "description": "",
        "operationId": "getOrderProducts",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "name": "productId",
            "in": "query",
            "description": "Filtering orderProducts by productId",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "minQty",
            "in": "query",
            "description": "Filtering orderProducts by qty greater then minQty",
            "required": false,
            "type": "integer"
          },
          {
            "name": "maxQty",
            "in": "query",
            "description": "Filtering orderProducts by qty less then maxQty",
            "required": false,
            "type": "integer"
          },
          {
            "name": "minPrice",
            "in": "query",
            "description": "Filtering orderProducts by product price greater then minPrice",
            "required": false,
            "type": "integer"
          },
          {
            "name": "maxPrice",
            "in": "query",
            "description": "Filtering orderProducts by product price less then maxPrice",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sorting orderProducts by property",
            "default": "productId",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Ordering results. ASC | DESC",
            "default": "DESC",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limiting orderProducts in array",
            "default": 10,
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrderProductResponse"
              }
            }
          }
        }
      }
    },
    "/orderProducts/{orderProductId}": {
      "get": {
        "tags": ["orderProduct"],
        "summary": "Find orderProduct by id",
        "operationId": "findOrderProductById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "name": "orderProductId",
            "in": "path",
            "description": "ID of orderProduct to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/OrderProduct"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "OrderProduct not found"
          }
        }
      }
    },
    "/questions": {
      "get": {
        "tags": ["question"],
        "summary": "Get array of questions",
        "description": "",
        "operationId": "getQuestions",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "productId",
            "in": "query",
            "description": "Filtering questions by productId",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Filtering questions by userId",
            "required": false,
            "type": "string"
          },
          {
            "name": "merge",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "true"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sorting questions by property",
            "default": "productId",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Ordering results. ASC | DESC",
            "default": "DESC",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "description": "qty rows to skip for pagination"
          },
          {
            "type": "string",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 10,
            "description": "qty rows to take for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/QuestionResponse"
            }
          }
        }
      },
      "post": {
        "tags": ["question"],
        "summary": "Create a question",
        "description": "",
        "operationId": "createQuestion",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/QuestionDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Review request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/questions/{questionId}": {
      "get": {
        "tags": ["question"],
        "summary": "Find question by id",
        "operationId": "findQuestionById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "name": "questionId",
            "in": "path",
            "description": "ID of question to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Question"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Question not found"
          }
        }
      },
      "put": {
        "tags": ["question"],
        "summary": "Update the question",
        "description": "",
        "operationId": "updateQuestion",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "name": "questionId",
            "in": "path",
            "description": "ID of question to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/QuestionDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful updated",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Question"
            }
          },
          "400": {
            "description": "Invalid Review request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Question not found"
          }
        }
      },
      "delete": {
        "tags": ["question"],
        "summary": "Delete the question",
        "description": "",
        "operationId": "deleteQuestion",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "name": "questionId",
            "in": "path",
            "description": "ID of question to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Review not found"
          }
        }
      }
    },
    "/questions/reaction": {
      "post": {
        "tags": ["question"],
        "summary": "Create a question reaction",
        "description": "",
        "operationId": "createQuestionReaction",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ReactionQuestion"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Question request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/questions/reaction/{reactionId}": {
      "delete": {
        "tags": ["review"],
        "summary": "Deletes question reaction",
        "description": "",
        "operationId": "deleteQuestionReaction",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "reactionId",
            "in": "path",
            "description": "ID of reaction to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted",
            "schema": {
              "type": "object",
              "properties": {
                "raw": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": ""
                },
                "affected": {
                  "type": "integer",
                  "description": "qty of deleted raws"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Reaction not found"
          }
        }
      }
    },
    "/reviews": {
      "get": {
        "tags": ["review"],
        "summary": "Get array of reviews",
        "description": "",
        "operationId": "getReviews",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "productId",
            "in": "query",
            "description": "Filtering reviews by productId",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Filtering reviews by userId",
            "required": false,
            "type": "string"
          },
          {
            "name": "showOnMain",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "merge",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "true"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sorting reviews by property",
            "default": "productId",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Ordering results. ASC | DESC",
            "default": "DESC",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "description": "qty rows to skip for pagination"
          },
          {
            "type": "string",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 10,
            "description": "qty rows to take for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ReviewResponse"
            }
          }
        }
      },
      "post": {
        "tags": ["review"],
        "summary": "Create a review",
        "description": "",
        "operationId": "createReview",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ReviewDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Review request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/reviews/{reviewId}": {
      "get": {
        "tags": ["review"],
        "summary": "Find review by id",
        "operationId": "findReviewById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "name": "reviewId",
            "in": "path",
            "description": "ID of review to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Review"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Review not found"
          }
        }
      },
      "put": {
        "tags": ["review"],
        "summary": "Update the review",
        "description": "",
        "operationId": "updateReview",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "name": "reviewId",
            "in": "path",
            "description": "ID of review to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ReviewDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful updated",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ReviewWithoutJoins"
            }
          },
          "400": {
            "description": "Invalid Review request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Review not found"
          }
        }
      },
      "delete": {
        "tags": ["review"],
        "summary": "Delete the review",
        "description": "",
        "operationId": "deleteReview",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "name": "reviewId",
            "in": "path",
            "description": "ID of review to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted",
            "schema": {
              "type": "object",
              "properties": {
                "rating": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 10
                },
                "comment": {
                  "type": "string"
                },
                "createdAt": {
                  "type": "string"
                },
                "updatedAt": {
                  "type": "string"
                },
                "showOnMain": {
                  "type": "boolean",
                  "default": false
                },
                "productId": {
                  "type": "string"
                },
                "userId": {
                  "type": "string"
                },
                "comments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Comment"
                  }
                },
                "reactions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ReviewReaction"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Review not found"
          }
        }
      }
    },
    "/reviews/reaction": {
      "post": {
        "tags": ["review"],
        "summary": "Create a review reaction",
        "description": "",
        "operationId": "createReviewReaction",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ReviewReaction"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Review request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/reviews/reaction/{reactionId}": {
      "delete": {
        "tags": ["review"],
        "summary": "Deletes review reaction",
        "description": "",
        "operationId": "deleteReviewReaction",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "reactionId",
            "in": "path",
            "description": "ID of reaction to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted",
            "schema": {
              "type": "object",
              "properties": {
                "raw": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": ""
                },
                "affected": {
                  "type": "integer",
                  "description": "qty of deleted raws"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Reaction not found"
          }
        }
      }
    },
    "/question-comments": {
      "post": {
        "tags": ["question"],
        "summary": "Create a question comment",
        "description": "",
        "operationId": "createQuestionComment",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CreateQuestionCommentDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Comment request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/question-comments/{commentId}": {
      "delete": {
        "tags": ["question"],
        "summary": "Deletes question comment",
        "description": "",
        "operationId": "deleteQuestionComment",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "ID of comment to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted",
            "schema": {
              "type": "object",
              "properties": {
                "raw": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": ""
                },
                "affected": {
                  "type": "integer",
                  "description": "qty of deleted raws"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Reaction not found"
          }
        }
      },
      "put": {
        "tags": ["question"],
        "summary": "Updates comment",
        "description": "Updateds question comments by Id",
        "operationId": "updateQuestionComment",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "ID of comment to return",
            "required": true,
            "type": "string"
          },
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string"
                },
                "text": {
                  "type": "string"
                },
                "reviewId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Comment request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/question-comments/reaction": {
      "post": {
        "tags": ["question"],
        "summary": "Create a question comment reaction",
        "description": "",
        "operationId": "createQuestionCommentReaction",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CommentReaction"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Review request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/question-comments/reaction/{reactionId}": {
      "delete": {
        "tags": ["question"],
        "summary": "Deletes question comment reaction",
        "description": "",
        "operationId": "deleteQuestionCommentReaction",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "reactionId",
            "in": "path",
            "description": "ID of reaction to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted",
            "schema": {
              "type": "object",
              "properties": {
                "raw": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": ""
                },
                "affected": {
                  "type": "integer",
                  "description": "qty of deleted raws"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Reaction not found"
          }
        }
      }
    },
    "/comments": {
      "post": {
        "tags": ["comment"],
        "summary": "Create a comment",
        "description": "",
        "operationId": "createComment",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CreateCommentDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Comment request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/comments/{commentId}": {
      "delete": {
        "tags": ["review"],
        "summary": "Deletes comment",
        "description": "",
        "operationId": "deleteComment",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "ID of comment to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted",
            "schema": {
              "type": "object",
              "properties": {
                "raw": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": ""
                },
                "affected": {
                  "type": "integer",
                  "description": "qty of deleted raws"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Reaction not found"
          }
        }
      },
      "put": {
        "tags": ["comment"],
        "summary": "Updates comment",
        "description": "Updateds comments by Id",
        "operationId": "updateComment",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "ID of comment to return",
            "required": true,
            "type": "string"
          },
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string"
                },
                "text": {
                  "type": "string"
                },
                "reviewId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Comment request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/comments/reaction": {
      "post": {
        "tags": ["review"],
        "summary": "Create a comment reaction",
        "description": "",
        "operationId": "createCommentReaction",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentReaction"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Review request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/comments/reaction/{reactionId}": {
      "delete": {
        "tags": ["review"],
        "summary": "Deletes comment reaction",
        "description": "",
        "operationId": "deleteCommentReaction",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "reactionId",
            "in": "path",
            "description": "ID of reaction to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted",
            "schema": {
              "type": "object",
              "properties": {
                "raw": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": ""
                },
                "affected": {
                  "type": "integer",
                  "description": "qty of deleted raws"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Reaction not found"
          }
        }
      }
    },
    "/wishlists": {
      "get": {
        "tags": ["wishlist"],
        "summary": "Get array of wishlists",
        "description": "",
        "operationId": "getWishlists",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sorting wishlists by property",
            "default": "productId",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Ordering results. ASC | DESC",
            "default": "DESC",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limiting wishlists in array",
            "default": 10,
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Wishlist"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["wishlist"],
        "summary": "Create a wishlist",
        "description": "",
        "operationId": "createWishlist",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Wishlist request"
          }
        }
      }
    },
    "/wishlists/{wishlistId}": {
      "get": {
        "tags": ["wishlist"],
        "summary": "Find wishlist by id",
        "operationId": "findWishlistById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "ID of wishlist to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Wishlist"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Wishlist not found"
          }
        }
      },
      "put": {
        "tags": ["wishlist"],
        "summary": "Update the wishlist",
        "description": "",
        "operationId": "updateWishlist",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "ID of wishlist to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Wishlist"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful updated",
            "schema": {
              "type": "object",
              "properties": {
                "raw": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": ""
                },
                "affected": {
                  "type": "integer",
                  "description": "qty of updated raws"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Wishlist request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Wishlist not found"
          }
        }
      },
      "delete": {
        "tags": ["wishlist"],
        "summary": "Delete the wishlist",
        "description": "",
        "operationId": "deleteWishlist",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "ID of wishlist to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted",
            "schema": {
              "type": "object",
              "properties": {
                "raw": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": ""
                },
                "affected": {
                  "type": "integer",
                  "description": "qty of deleted raws"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Wishlist not found"
          }
        }
      }
    },
    "/wishlists/wishlistProducts/{wishlistId}": {
      "get": {
        "tags": ["wishlist"],
        "summary": "Find products by wishlist id",
        "operationId": "findWishlistProducts",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "ID of wishlist to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful updated",
            "schema": {
              "type": "object",
              "properties": {
                "raw": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": ""
                },
                "affected": {
                  "type": "integer",
                  "description": "qty of updated raws"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Wishlist request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Wishlist not found"
          }
        }
      }
    },
    "/slides": {
      "get": {
        "tags": ["slide"],
        "summary": "Get array of slides",
        "description": "",
        "operationId": "getSlides",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Slide"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["slide"],
        "summary": "Create a slide",
        "description": "",
        "operationId": "createSlide",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Slide"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Size request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "put": {
        "tags": ["slide"],
        "summary": "Update slides",
        "description": "",
        "operationId": "updateSlides",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SlideDTO"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful updated",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Slide"
              }
            }
          },
          "400": {
            "description": "Invalid Slide request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/slides/{slideId}": {
      "get": {
        "tags": ["slide"],
        "summary": "Find slide by id",
        "operationId": "findSlideById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "slideId",
            "in": "path",
            "description": "id of slide to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Slide"
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "Slide not found"
          }
        }
      }
    },
    "/advertisements": {
      "get": {
        "tags": ["advertisement"],
        "summary": "Get object of advertisements in string mode",
        "description": "",
        "operationId": "getAdvertisements",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Advertisement"
              }
            }
          }
        }
      }
    },
    "/advertisements/{advertisementId}": {
      "get": {
        "tags": ["advertisement"],
        "summary": "Find Get object of advertisements in string mode by id",
        "operationId": "findAdvertisementById",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "advertisementId",
            "in": "path",
            "description": "id of advertisement to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Advertisement"
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "Advertisement not found"
          }
        }
      },
      "put": {
        "tags": ["advertisement"],
        "summary": "Update the advertisement",
        "description": "",
        "operationId": "updateAdvertisement",
        "produces": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token"
          },
          {
            "name": "advertisementId",
            "in": "path",
            "description": "id of advertisement to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Advertisement"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful updated",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Advertisement"
            }
          },
          "400": {
            "description": "Invalid Advertisement request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Advertisement not found"
          }
        }
      }
    },
    "/analytics": {
      "get": {
        "tags": ["analytics"],
        "summary": "Get analytics object",
        "description": "",
        "operationId": "getAnalytics",
        "consumes": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token"
          },
          {
            "name": "updatedFrom",
            "in": "query",
            "description": "filtering sales from date",
            "required": false,
            "type": "string"
          },
          {
            "name": "updatedTo",
            "in": "query",
            "description": "filtering sales to date",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "filtering sales by basket status",
            "required": false,
            "type": "string"
          },
          {
            "name": "groupBy",
            "in": "query",
            "description": "group sales by user/category/brand/product",
            "required": false,
            "default": "product",
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "product or user or brand or category object with properties: qty and amount"
                    }
                  },
                  "totalAmount": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/analytics/dynamic": {
      "get": {
        "tags": ["analytics"],
        "summary": "Get sales dynamic from period",
        "description": "",
        "operationId": "getDynamic",
        "consumes": ["application/json"],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token"
          },
          {
            "name": "from",
            "in": "query",
            "description": "filtering sales from date",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "filtering sales to date",
            "required": true,
            "type": "string"
          },
          {
            "name": "step",
            "in": "query",
            "description": "step for dynamics (day or month)",
            "required": false,
            "default": "day",
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string"
                  },
                  "amount": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query params"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Barcode": {
      "required": ["code"],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "code": {
          "type": "string"
        },
        "checked": {
          "type": "boolean",
          "default": false,
          "description": "if true means the barcode is used already and unusable"
        },
        "counter": {
          "type": "number",
          "description": "counter of checked time"
        },
        "createdAt": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Brand": {
      "required": ["name", "url"],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "showOnMain": {
          "type": "boolean",
          "default": false,
          "description": "value true can be post only with admin token"
        }
      },
      "xml": {
        "name": "Brand"
      }
    },
    "BarCodeResponse": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Barcode"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },
    "barcodeGen": {
      "properties": {
        "barcodeLenght": "number",
        "startsWith": "string"
      }
    },
    "BrandResponse": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Brand"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },
    "Category": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "readOnly": true
        },
        "parent": {
          "type": "object",
          "$ref": "#/definitions/Category"
        },
        "children": {
          "type": "object",
          "$ref": "#/definitions/Category"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Parameter"
          }
        },
        "url": {
          "type": "string"
        }
      }
    },
    "CategoryWithoutJoins": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "readOnly": true
        },
        "url": {
          "type": "string"
        }
      }
    },
    "CategoryInTree": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "readOnly": true
        },
        "children": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CategoryInTree"
          }
        },
        "url": {
          "type": "string"
        }
      }
    },
    "CategoryResponse": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Category"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },
    "CategoryDTO": {
      "required": ["name", "parameters", "url"],
      "properties": {
        "name": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "parentId": {
          "type": "string",
          "description": "parent category ID"
        },
        "children": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "array of children categories IDs"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Parameter"
          }
        },
        "url": {
          "type": "string"
        }
      }
    },
    "Color": {
      "required": ["name", "url", "code"],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "products": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ProductWithoutJoins"
          },
          "readOnly": true
        },
        "url": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "ColorWithoutJoins": {
      "required": ["name", "url", "code"],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "ColorResponse": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Color"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },
    "Parameter": {
      "required": ["name"],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Rating": {
      "properties": {
        "1": {
          "type": "number"
        },
        "2": {
          "type": "number"
        },
        "3": {
          "type": "number"
        },
        "4": {
          "type": "number"
        },
        "5": {
          "type": "number"
        },
        "avg": {
          "type": "number"
        }
      }
    },
    "ParameterProduct": {
      "properties": {
        "productId": {
          "type": "string"
        },
        "parameterId": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "parameter": {
          "$ref": "#/definitions/Parameter"
        }
      }
    },
    "ParameterProductsDTO": {
      "required": ["parameterId", "value"],
      "properties": {
        "parameterId": {
          "type": "number"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "Product": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "shortDesc": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "readOnly": true
        },
        "category": {
          "type": "object",
          "$ref": "#/definitions/Category"
        },
        "brand": {
          "type": "object",
          "$ref": "#/definitions/Brand"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/TagWithoutJoins"
          }
        },
        "sizes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SizeWithoutJoins"
          }
        },
        "url": {
          "type": "string"
        },
        "rating": {
          "$ref": "#/definitions/Rating"
        },
        "reviews": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReviewWithoutJoins"
          }
        },
        "questions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Question"
          }
        },
        "parameterProducts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterProduct"
          }
        },
        "productVariants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductVariant"
          }
        }
      }
    },
    "ProductResponse": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Product"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },
    "ProductWithoutJoins": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "readOnly": true
        },
        "url": {
          "type": "string"
        }
      }
    },
    "ProductVariant": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "price": {
          "type": "integer",
          "minimum": 1
        },
        "oldPrice": {
          "type": "integer"
        },
        "wholeSalePrice": {
          "type": "integer"
        },
        "artical": {
          "type": "string"
        },
        "available": {
          "type": "boolean"
        },
        "images": {
          "type": "string"
        },
        "color": {
          "type": "object",
          "$ref": "#/definitions/Color"
        }
      }
    },
    "ProductDTO": {
      "required": ["name", "category", "brand", "url"],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "shortDesc": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "readOnly": true
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "array of tags IDs"
        },
        "category": {
          "type": "string",
          "description": "Category ID"
        },
        "brand": {
          "type": "string",
          "description": "Brand ID"
        },
        "url": {
          "type": "string"
        },
        "parameterProducts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParameterProductsDTO"
          }
        },
        "productVariants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductVariant"
          }
        }
      }
    },
    "Tag": {
      "required": ["name", "url"],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "products": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ProductWithoutJoins"
          },
          "readOnly": true
        },
        "url": {
          "type": "string"
        }
      }
    },
    "TagResponse": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },
    "TagWithoutJoins": {
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "Size": {
      "required": ["name", "url"],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "products": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ProductWithoutJoins"
          },
          "readOnly": true
        },
        "url": {
          "type": "string"
        }
      }
    },
    "SizeResponse": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Size"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },
    "SizeWithoutJoins": {
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "Image": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "type": "string"
        },
        "originalName": {
          "type": "string"
        },
        "mimeType": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        }
      }
    },
    "ImageResponse": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },
    "Address": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "checkouts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CheckoutWithoutJoins"
          }
        }
      }
    },
    "AddressWithoutJoins": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "userId": {
          "type": "string"
        },
        "receiverName": {
          "type": "string"
        },
        "receiverPhone": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "roomOrOffice": {
          "type": "string"
        },
        "door": {
          "type": "string"
        },
        "floor": {
          "type": "string"
        },
        "rignBell": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        }
      }
    },
    "AddressResponse": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },
    "AddressDirectDTO": {
      "required": ["receiverName", "receiverPhone", "address", "zipCode"],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "userId": {
          "type": "string",
          "readOnly": true
        },
        "receiverName": {
          "type": "string"
        },
        "receiverPhone": {
          "type": "string"
        },
        "receiverEmail": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "roomOrOffice": {
          "type": "string"
        },
        "door": {
          "type": "string"
        },
        "floor": {
          "type": "string"
        },
        "rignBell": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        }
      }
    },
    "AddressDTO": {
      "required": ["receiverName", "receiverPhone", "address", "zipCode"],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "receiverName": {
          "type": "string"
        },
        "receiverPhone": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "roomOrOffice": {
          "type": "string"
        },
        "door": {
          "type": "string"
        },
        "floor": {
          "type": "string"
        },
        "rignBell": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        }
      }
    },
    "Basket": {
      "required": ["orderProducts"],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "userId": {
          "type": "string"
        },
        "orderProducts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/OrderProduct"
          }
        },
        "totalAmount": {
          "type": "number"
        },
        "checkout": {
          "type": "object",
          "$ref": "#/definitions/CheckoutWithoutJoins"
        },
        "createdAt": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "default": "New"
        }
      }
    },
    "BasketWithoutJoins": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "userId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "default": "New"
        }
      }
    },
    "BasketResponse": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Basket"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },
    "BasketDTO": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "orderProducts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/OrderProductDTO"
          },
          "description": "Array of orderProducts IDs"
        },
        "checkout": {
          "type": "string",
          "description": "Checkout ID"
        }
      }
    },
    "Checkout": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "paymentId": {
          "type": "string"
        },
        "address": {
          "type": "object",
          "$ref": "#/definitions/AddressWithoutJoins"
        },
        "basket": {
          "type": "object",
          "$ref": "#/definitions/Basket"
        },
        "comment": {
          "type": "string"
        },
        "leaveNearDoor": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "status": {
          "type": "number",
          "enum": ["New", "InDelivery", "Completed", "Canceled"]
        }
      }
    },
    "CheckoutResponse": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Checkout"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },
    "CheckoutWithoutJoins": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "paymentId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "leaveNearDoor": {
          "type": "boolean"
        }
      }
    },
    "CheckoutDTO": {
      "required": ["address", "basket"],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "paymentId": {
          "type": "string",
          "description": "Payment ID"
        },
        "address": {
          "type": "string",
          "description": "Address ID"
        },
        "basket": {
          "type": "string",
          "description": "Basket ID"
        },
        "comment": {
          "type": "string"
        },
        "leaveNearDoor": {
          "type": "boolean"
        },
        "totalAmount": {
          "type": "number",
          "description": "Total payment"
        },
        "userId": {
          "type": "string",
          "description": "User ID"
        }
      }
    },
    "OrderProduct": {
      "required": ["product", "inBasket"],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "product": {
          "type": "object",
          "$ref": "#/definitions/Product"
        },
        "productVariant": {
          "type": "object",
          "$ref": "#/definitions/ProductVariant"
        },
        "qty": {
          "type": "integer",
          "minimum": 1
        },
        "productSize": {
          "type": "string"
        },
        "productPrice": {
          "type": "integer",
          "readOnly": true
        },
        "inBasket": {
          "type": "object",
          "$ref": "#/definitions/Basket"
        }
      }
    },
    "OrderProductResponse": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderProductWithJoins"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },
    "OrderProductDTO": {
      "required": ["productId", "qty"],
      "properties": {
        "productId": {
          "type": "string"
        },
        "qty": {
          "type": "integer",
          "minimum": 1
        },
        "productSize": {
          "type": "string"
        },
        "productVariantId": {
          "type": "string"
        }
      }
    },
    "OrderProductWithJoins": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "product": {
          "type": "object",
          "$ref": "#/definitions/Product"
        },
        "productVariant": {
          "type": "object",
          "$ref": "#/definitions/ProductVariant"
        },
        "qty": {
          "type": "integer",
          "minimum": 1
        },
        "productPrice": {
          "type": "integer",
          "readOnly": true
        },
        "inBasket": {
          "type": "object",
          "$ref": "#/definitions/Basket"
        }
      }
    },
    "NewsDTO": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "title": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "post": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "showOnMain": {
          "type": "boolean"
        }
      }
    },
    "QuestionDTO": {
      "required": ["productId", "userId", "text"],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "text": {
          "type": "string"
        },
        "productId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "ReviewDTO": {
      "required": ["rating", "productId", "userId"],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "rating": {
          "type": "integer",
          "minimum": 1,
          "maximum": 10
        },
        "text": {
          "type": "string"
        },
        "images": {
          "type": "string"
        },
        "productId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "showOnMain": {
          "type": "boolean"
        }
      }
    },
    "ReviewResponse": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Review"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },
    "Review": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "rating": {
          "type": "integer",
          "minimum": 1,
          "maximum": 10
        },
        "text": {
          "type": "string"
        },
        "images": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "showOnMain": {
          "type": "boolean",
          "default": false
        },
        "product": {
          "type": "object",
          "$ref": "#/definitions/Product"
        },
        "user": {
          "type": "object",
          "$ref": "#/definitions/User"
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        },
        "reactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReviewReaction"
          }
        }
      }
    },
    "Question": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "text": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "product": {
          "type": "object",
          "$ref": "#/definitions/Product"
        },
        "user": {
          "type": "object",
          "$ref": "#/definitions/User"
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuestionComment"
          }
        },
        "reactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReactionQuestion"
          }
        }
      }
    },
    "QuestionResponse": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Question"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },
    "ReviewWithoutJoins": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "rating": {
          "type": "integer",
          "minimum": 1,
          "maximum": 10
        },
        "text": {
          "type": "string"
        },
        "images": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "showOnMain": {
          "type": "boolean",
          "default": false
        },
        "productId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "user": {
          "type": "object",
          "$ref": "#/definitions/User"
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        },
        "reactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReviewReaction"
          }
        }
      }
    },
    "SubscribersResponse": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "SubscriberDTO": {
      "type": "object",
      "required": ["email"],
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "MailingsResponse": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "html": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        }
      }
    },
    "MailingDTO": {
      "type": "object",
      "required": ["email"],
      "properties": {
        "html": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        }
      }
    },
    "EmailTemplateForOneDTO": {
      "required": ["to", "html", "subject"],
      "properties": {
        "to": {
          "type": "string"
        },
        "html": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        }
      }
    },
    "EmailTemplateSelectedDTO": {
      "required": ["mailingId", "subscribers"],
      "properties": {
        "mailingId": {
          "type": "string"
        },
        "subscribers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SubscriberDTO"
          }
        }
      }
    },
    "SigninDTO": {
      "type": "object",
      "required": ["email", "password"],
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "SignupDTO": {
      "type": "object",
      "required": ["email"],
      "properties": {
        "email": {
          "type": "string"
        },
        "isSubscribed": {
          "type": "boolean"
        }
      }
    },
    "ReviewReaction": {
      "properties": {
        "id": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "reviewId": {
          "type": "string"
        },
        "reaction": {
          "type": "string",
          "default": "Like"
        }
      }
    },
    "ReactionQuestion": {
      "properties": {
        "id": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "questionId": {
          "type": "string"
        },
        "reaction": {
          "type": "string",
          "default": "Like"
        }
      }
    },
    "User": {
      "required": ["firstName", "lastName", "email", "password"],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "isVerified": {
          "type": "boolean",
          "default": false
        },
        "role": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        }
      }
    },

    "UsersResponses": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },

    "Comment": {
      "properties": {
        "id": {
          "type": "string"
        },
        "user": {
          "type": "object",
          "$ref": "#/definitions/User"
        },
        "review": {
          "type": "object",
          "$ref": "#/definitions/Review"
        },
        "text": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "reactions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CommentReaction"
          }
        }
      }
    },
    "QuestionComment": {
      "properties": {
        "id": {
          "type": "string"
        },
        "user": {
          "type": "object",
          "$ref": "#/definitions/User"
        },
        "question": {
          "type": "object",
          "$ref": "#/definitions/Question"
        },
        "text": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "reactions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CommentReaction"
          }
        }
      }
    },
    "CommentReaction": {
      "properties": {
        "id": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "commentId": {
          "type": "string"
        },
        "reaction": {
          "type": "string",
          "default": "Like"
        }
      }
    },
    "Wishlist": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/WishlistProduct"
          }
        },
        "products": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Product"
          }
        }
      }
    },

    "CreateCommentDTO": {
      "properties": {
        "userId": {
          "type": "string",
          "readOnly": true
        },
        "text": {
          "type": "string",
          "readOnly": true
        },
        "reviewId": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "CreateQuestionCommentDTO": {
      "properties": {
        "userId": {
          "type": "string",
          "readOnly": true
        },
        "text": {
          "type": "string",
          "readOnly": true
        },
        "questionId": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "WishlistProduct": {
      "properties": {
        "id": {
          "type": "string"
        },
        "productId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "PriceRange": {
      "properties": {
        "minPrice": {
          "type": "number"
        },
        "maxPrice": {
          "type": "number"
        }
      }
    },
    "Advertisement": {
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "NewsPosts": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/News"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },
    "News": {
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "post": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "showOnMain": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Slide": {
      "properties": {
        "id": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "link": {
          "type": "string"
        }
      }
    },
    "SlideDTO": {
      "properties": {
        "image": {
          "type": "string"
        },
        "link": {
          "type": "string"
        }
      }
    }
  }
}
